<?php

namespace MainBundle\Controller;

use MainBundle\Entity\Commentary;
use MainBundle\Entity\Event;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Symfony\Component\HttpFoundation\Request;

/**
 * Event controller.
 *
 * @Route("event")
 */
class EventController extends Controller
{
    /**
     * Lists all event entities.
     *
     * @Route("/", name="event_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $events = $em->getRepository('MainBundle:Event')->findAll(array('beginningDate' => 'DESC'));

        return $this->render('event/index.html.twig', array(
            'events' => $events,
        ));
    }


    public function myeventsAction()
    {
        $em = $this->getDoctrine()->getManager();
        $user=$this->getUser();
        $uid=$user->getid();

        $events = $em->getRepository('MainBundle:Event')->findBy(['hostid' => $uid], array('beginningDate' => 'DESC'));

        return $this->render('event/myevents.html.twig', array(
            'events' => $events,
        ));
    }
    /**
     * Creates a new event entity.
     *
     * @Route("/new", name="event_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {
        $event = new Event();
        $user=$this->getUser();
      /*  $user = $this->container->get('security.context')->getToken()->getUser();*/

        $form = $this->createForm('MainBundle\Form\EventType', $event);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $event->getBrochure();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $event->setBrochure($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($event);
            $event->setHostid($user);
            $em->flush();



            return $this->redirectToRoute('event_show', array('id' => $event->getId()));
        }

        return $this->render('event/new.html.twig', array(
            'event' => $event,
            'form' => $form->createView(),
        ));
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * Finds and displays a event entity.
     *
     * @Route("/{id}", name="event_show")
     * @Method({"GET", "POST"})
     */
    public function showAction(Event $event,Request $request)
    { $verif=1;
        $deleteForm = $this->createDeleteForm($event);
        $em = $this->getDoctrine()->getManager();

$thiseventreservation=$em->getRepository('MainBundle:Reservation')->findBy(['eventid' => $event->getId()]);
        $commentaries = $em->getRepository('MainBundle:Commentary')->findBy(['commentedevent'=>$event]);
$participationnumber=count($thiseventreservation);

$securityContext = $this->container->get('security.authorization_checker');
        if ($securityContext->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            // authenticated REMEMBERED, FULLY will imply REMEMBERED (NON anonymous)
            $user = $this->getUser();
            $actualuid = $user->getid();



            $test = $em->getRepository('MainBundle:Reservation')->findBy(['eventid' => $event->getId(), 'participantid' => $actualuid]);

            if(empty($test)){
                $verif=0;
            }else{
                $verif=1;
            }
            $commentary = new Commentary();
            $form = $this->createForm('MainBundle\Form\CommentaryType', $commentary);
            $form->handleRequest($request);
            $ratedreservation = $em->getRepository('MainBundle:Reservation')->findOneBy(['eventid' => $event->getId(), 'participantid' => $actualuid]);

            $formrating = $this->createForm('MainBundle\Form\ReservationType');

$formrating->handleRequest($request);
if($formrating->isSubmitted()&&$formrating->isValid()){


    $em = $this->getDoctrine()->getEntityManager();
    $ratedreservation = $em->getRepository('MainBundle:Reservation')->findOneBy(['eventid' => $event->getId(), 'participantid' => $actualuid]);
    $note=$formrating->getData('rating');
    $LAnote=$note->getRating();
    $ratedreservation->setRating($note);
    $em->flush();
    $ratedreservation = $em->getRepository('MainBundle:Reservation')->findOneBy(['eventid' => $event->getId(), 'participantid' => $actualuid]);
$note=$ratedreservation->getRating();
    return $this->render('event/show.html.twig', array(
        'event' => $event,
        'delete_form' => $deleteForm->createView(),
        'verif'=>$verif,
        'nbparticipants'=>$participationnumber,
        'reservations'=>$thiseventreservation,
        'commentaries' => $commentaries,
        'form' => $form->createView(),


    ));

}

            if ($form->isSubmitted() && $form->isValid()) {
                $sessionMessageIdent = isset($_SESSION['messageIdent'])?$_SESSION['messageIdent']:'';

                $em = $this->getDoctrine()->getManager();
                $em->persist($commentary);
                $date = new \DateTime();

                $commentary->setCreationDate($date);
                $commentary->setCommentedevent($event);
                $commentary->setCommentator($user);
                $em->flush();
                unset($commentary);
                unset($form);
                unset($_POST);
                unset($_REQUEST);
                $commentary = new Commentary();
                $form = $this->createForm('MainBundle\Form\CommentaryType', $commentary);
                $commentaries = $em->getRepository('MainBundle:Commentary')->findBy(['commentedevent'=>$event]);
                $this->redirect($this->generateUrl('event_show',array(
                    'id'=>$event->getId(),
                    'event' => $event,
                    'delete_form' => $deleteForm->createView(),
                    'verif'=>$verif,
                    'nbparticipants'=>$participationnumber,
                    'reservations'=>$thiseventreservation,
                    'form' => $form->createView(),
                    'commentaries' => $commentaries,


                )));

            }

            }
        $thiseventreservation=$em->getRepository('MainBundle:Reservation')->findBy(['eventid' => $event->getId()]);
        $participationnumber=count($thiseventreservation);
        $commentary = new Commentary();

        $form = $this->createForm('MainBundle\Form\CommentaryType', $commentary);


        return $this->render('event/show.html.twig', array(
            'event' => $event,
            'delete_form' => $deleteForm->createView(),
            'verif'=>$verif,
            'nbparticipants'=>$participationnumber,
            'reservations'=>$thiseventreservation,
            'commentaries' => $commentaries,
            'form' => $form->createView(),


        ));
    }

    /**
     * Displays a form to edit an existing event entity.
     *
     * @Route("/{id}/edit", name="event_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Event $event)
    {
        $deleteForm = $this->createDeleteForm($event);
        $editForm = $this->createForm('MainBundle\Form\EventType', $event);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('event_edit', array('id' => $event->getId()));
        }

        return $this->render('event/edit.html.twig', array(
            'event' => $event,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a event entity.
     *
     * @Route("/{id}", name="event_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, Event $event)
    {

        $form = $this->createDeleteForm($event);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $reservations= $em->getRepository('MainBundle:Reservation')
                ->findBy(['eventid'=>$event]);


            foreach ($reservations as $reservation ) {
                $em->remove($reservation);
            }
            $em->remove($event);
            $em->flush();
        }

        return $this->redirectToRoute('event_index');
    }

    /**
     * Creates a form to delete a event entity.
     *
     * @param Event $event The event entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Event $event)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('event_delete', array('id' => $event->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
    public function nexteventAction( $id)
    {
        $em=$this->getDoctrine()->getManager();
       $nextid= $em->getRepository('MainBundle:Event')->getNextEvent($id);
        if($nextid== null)
        {
            $nextid=$em->getRepository('MainBundle:Event')->getFirstEvent();
            return $this->redirectToRoute('event_show', array('id'=> $nextid->getId()));

        }
        return $this->redirectToRoute('event_show', array('id'=> $nextid->getId()));

    }
    public function previouseventAction( $id)
    {
        $em=$this->getDoctrine()->getManager();
        $previousid= $em->getRepository('MainBundle:Event')->getPreviousEvent($id);
        if($previousid== null)
        {
            $previousid=$em->getRepository('MainBundle:Event')->getLastEvent();
            return $this->redirectToRoute('event_show', array('id'=> $previousid->getId()));

        }
        return $this->redirectToRoute('event_show', array('id'=> $previousid->getId()));

    }

}
